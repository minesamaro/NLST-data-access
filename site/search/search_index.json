{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NLST Accessing Script","text":"<p>This documentation is under development. For more clarification, see the \"Contact Me\" page</p>"},{"location":"#overview","title":"Overview","text":"<p>This script processes DICOM files to extract paths to slices or folders containing abnormalities based on specified criteria. It takes input from a CSV file containing patient IDs (pids), study years, and slice numbers, and saves the results to another CSV file.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#arguments","title":"Arguments","text":"<ul> <li><code>--df &lt;path_to_csv&gt;</code>: Path to the CSV file with patient IDs and study years.<ul> <li>Required columns: <code>pid</code>, <code>study_yr</code>, <code>sct_slice_num</code>, <code>sct_ab_desc</code> (only if <code>'slice_or_folder' == 'slice'</code>).</li> </ul> </li> <li><code>--save &lt;path_to_save_csv&gt;</code>: Path to save the CSV file with paths information.<ul> <li>Default: <code>path_df.csv</code> in the current working directory.</li> </ul> </li> <li><code>--NLST_data_path &lt;path_to_NLST_data&gt;</code>: Path to the folder where NLST data is stored.<ul> <li>Default: <code>/nas-ctm01/sas-storage/data01/NLST</code>.</li> </ul> </li> <li><code>--slice_or_folder &lt;slice_or_folder_flag&gt;</code>: Flag to indicate if the script should return paths to slices or folders.<ul> <li>Possible values: <code>slice</code>, <code>folder</code>.</li> <li>Default: <code>slice</code>.</li> </ul> </li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>python script_name.py --df path_to_participant_data.csv --save path_to_save_results.csv --NLST_data_path /path/to/data/NLST --slice_or_folder 'slice' \n</code></pre>"},{"location":"contact/","title":"Contact Me","text":"<p>Thank you for visiting this documentation! The documentation is still under progress but if you have any questions, suggestions, or just want to say hello, feel free to reach out to me using the information below.</p>"},{"location":"contact/#contact-information","title":"Contact Information","text":"<ul> <li>Email <pre><code>maria.i.paiva@inesctec.pt\n</code></pre></li> </ul> <p>Feel free to connect with me through any of the above channels and let me know if this project has been useful/ is working for you. Thank you!</p>"},{"location":"api/NLST_data_accessing/","title":"API Documentation","text":""},{"location":"api/NLST_data_accessing/#nlst_data_accessingpy","title":"NLST_data_accessing.py","text":"<p>Script to process DICOM files and extract paths to slices or folders with abnormalities.</p> <p>This script takes a CSV file with patient IDs (pids), study years, and slice numbers, processes the DICOM files to find the best slice or folder for each patient, and saves the results to a specified CSV file.</p> Usage <p>python script_name.py --df  --save  --NLST_data_path  --slice_or_folder  <p>Parameters:</p> Name Type Description Default <code>--df</code> <code>str</code> <p>Path to the CSV file with the pids and study years of the abnormalities reported.         Required columns: pid, study_yr, sct_slice_num, sct_ab_desc.</p> required <code>--save</code> <code>str</code> <p>Path to the CSV file where the paths information will be saved.           Default is 'path_df.csv' in the current working directory.</p> required <code>--NLST_data_path</code> <code>str</code> <p>Path to the folder where the NLST data is stored.                     Default is '/nas-ctm01/sas-storage/data01/NLST'.</p> required <code>--slice_or_folder</code> <code>str</code> <p>Flag to indicate if the script should return the paths to the slices or to the folders.                      Possible values are 'slice' and 'folder'.                      Default is 'slice'.</p> required Example <p>python script_name.py --df participant_data.csv --save results.csv --NLST_data_path /path/to/data --slice_or_folder slice</p> <p>markdown:     filename: NLST_data_accessing.md     section: main</p>"},{"location":"api/get_pid_paths/","title":"API Documentation","text":""},{"location":"api/get_pid_paths/#get_pid_pathspid-data_path","title":"get_pid_paths(pid, data_path)","text":"<p>Get the path of the patient with the given pid.</p> <p>Parameters:</p> Name Type Description Default <code>pid</code> <code>str</code> <p>Patient ID.</p> required <code>data_path</code> <code>str</code> <p>Path to the data folder.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>List of paths to the patient's folders.</p> Source code in <code>src\\NLST_data_accessing.py</code> <pre><code>def get_pid_paths(pid, data_path):\n    \"\"\"\n    Get the path of the patient with the given pid.\n\n    Args:\n        pid (str): Patient ID.\n        data_path (str): Path to the data folder.\n\n    Returns:\n        list: List of paths to the patient's folders.\n\n    \"\"\"\n    # Get the path of the patient with pid\n    path = os.path.join(data_path, str(pid))\n    # Get the list of the folders in the path if they exist\n    try:\n        folders = os.listdir(path)\n        folders =[os.path.join(path, folder) for folder in folders] \n    except FileNotFoundError:\n        return None\n\n    return folders\n</code></pre>"},{"location":"api/get_preference_rank/","title":"API Documentation","text":""},{"location":"api/get_preference_rank/#get_preference_rankmanufacturer-kernel","title":"get_preference_rank(manufacturer, kernel)","text":"<p>Get the preference rank of the convolution kernel for a manufacturer.</p> <p>Parameters:</p> Name Type Description Default <code>manufacturer</code> <code>str</code> <p>Manufacturer name.</p> required <code>kernel</code> <code>str</code> <p>Convolution kernel name.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Preference rank.</p> Source code in <code>src\\NLST_data_accessing.py</code> <pre><code>def get_preference_rank(manufacturer, kernel):\n    \"\"\"\n    Get the preference rank of the convolution kernel for a manufacturer.\n\n    Args:\n        manufacturer (str): Manufacturer name.\n        kernel (str): Convolution kernel name.\n\n    Returns:\n        int: Preference rank.\n    \"\"\"\n    # Preference orders for different manufacturers\n    preference_order = {\n        'SIEMENS': ['B50f', 'B45f', 'B50s', 'B40f', 'B41s', 'B60f', 'B60s', 'B70f', 'B36f', 'B35f', 'B30f', 'B31s'],\n        'GE MEDICAL SYSTEMS': ['LUNG', 'BONE', 'BODY FILTER/BONE', 'STANDARD', 'BODY FILTER/STANDARD', 'SOFT', 'EXPERIMENTAL7', 'BODY FILTER/EXPERIMENTAL7'],\n        'Philips': ['D', 'C', 'B', 'A'],\n        'TOSHIBA': ['FC51', 'FC50', 'FC52', 'FC53', 'FC30', 'FC11', 'FC10', 'FC82', 'FL04', 'FC02', 'FC01', 'FL01']\n    }\n    if manufacturer in preference_order:\n        if kernel in preference_order[manufacturer]:\n            return preference_order[manufacturer].index(kernel)\n    return float('inf')  # Return a high value if the kernel is not found\n</code></pre>"},{"location":"api/get_slice_paths/","title":"API Documentation","text":""},{"location":"api/get_slice_paths/#get_slice_pathsseries_folders-sct_slice_num","title":"get_slice_paths(series_folders, sct_slice_num)","text":"<p>Get the paths to the slices with the specified slice number.</p> <p>Parameters:</p> Name Type Description Default <code>series_folders</code> <code>list</code> <p>List of series folders.</p> required <code>sct_slice_num</code> <code>int</code> <p>Slice number.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>List of paths to the slices.</p> Source code in <code>src\\NLST_data_accessing.py</code> <pre><code>def get_slice_paths(series_folders, sct_slice_num):\n    \"\"\"\n    Get the paths to the slices with the specified slice number.\n\n    Args:\n        series_folders (list): List of series folders.\n        sct_slice_num (int): Slice number.\n\n    Returns:\n        list: List of paths to the slices.\n    \"\"\"\n    # Go to each series folder and get the slice with the sct_slice_num\n    slice_paths =[] \n    for serie in series_folders:\n        # Get the path of the slice, the name of the slice is 1-xxx.dcm with 3 digits\n        path = f'{serie}/1-{sct_slice_num:03}.dcm'\n        slice_paths.append(path)\n    return slice_paths\n</code></pre>"},{"location":"api/get_study_yr_series/","title":"API Documentation","text":""},{"location":"api/get_study_yr_series/#get_study_yr_seriesstudy_yr-folders","title":"get_study_yr_series(study_yr, folders)","text":"<p>Get the series folders for the specified study year.</p> <p>Parameters:</p> Name Type Description Default <code>study_yr</code> <code>int</code> <p>Study year.</p> required <code>folders</code> <code>list</code> <p>List of folders.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>List of series folders.</p> Source code in <code>src\\NLST_data_accessing.py</code> <pre><code>def get_study_yr_series(study_yr, folders):\n    \"\"\"\n    Get the series folders for the specified study year.\n\n    Args:\n        study_yr (int): Study year.\n        folders (list): List of folders.\n\n    Returns:\n        list: List of series folders.\n    \"\"\"\n    # Get the folder with the study year\n    study_folder = [folder for folder in folders if f'01-02-{1999 + study_yr}' in folder]\n    if not study_folder:\n        return None\n    series_folders = os.listdir(study_folder[0])\n    series_folders =[os.path.join(study_folder[0], serie) for serie in series_folders] \n    return series_folders\n</code></pre>"},{"location":"api/process_dicom_files/","title":"API Documentation","text":""},{"location":"api/process_dicom_files/#process_dicom_filesdicom_files-slice_or_folder-slice_num_in_path-none","title":"process_dicom_files(dicom_files, slice_or_folder, slice_num_in_path = None)","text":"<p>Process DICOM files to find the best file based on specified criteria.</p> <p>Parameters:</p> Name Type Description Default <code>dicom_files</code> <code>list</code> <p>List of DICOM file paths.</p> required <code>slice_or_folder</code> <code>str</code> <p>Flag to indicate if the script should return the paths to the slices or to the folders.</p> required <code>slice_num_in_path</code> <code>int</code> <p>Slice number in the path. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>pd.Series: Series containing information about the best DICOM file.</p> Source code in <code>src\\NLST_data_accessing.py</code> <pre><code>def process_dicom_files(dicom_files, slice_or_folder, slice_num_in_path = None):\n    \"\"\"\n    Process DICOM files to find the best file based on specified criteria.\n\n    Args:\n        dicom_files (list): List of DICOM file paths.\n        slice_or_folder (str): Flag to indicate if the script should return the paths to the slices or to the folders.\n        slice_num_in_path (int, optional): Slice number in the path. Defaults to None.\n\n    Returns:\n        pd.Series: Series containing information about the best DICOM file.\n    \"\"\"\n    # Store the data about the best file in a Series\n    best_file_s = pd.Series()\n\n    if slice_or_folder == 'slice':\n        best_file_s = pd.Series(index=['path', 'manufacturer', 'kernel', 'series_number', 'not_found', 'slice_thickness', 'wrong_slice_annotation'])\n    else:\n        best_file_s = pd.Series(index=['path', 'manufacturer', 'kernel', 'series_number', 'not_found', 'slice_thickness'])\n\n    best_file = None\n    best_kernel_rank = float('inf')\n    highest_series_number = -1\n    wrong_slice = None\n\n    for file_path in dicom_files:\n        if slice_or_folder == 'folder':\n            file_path = file_path + '/1-003.dcm'\n\n        if not os.path.exists(file_path):\n            continue\n\n        ct_1 = pydicom.dcmread(file_path)\n\n        if ct_1.SliceThickness &gt; 5:\n            continue\n\n        manufacturer = getattr(ct_1, 'Manufacturer', None)\n        convolution_kernel = getattr(ct_1, 'ConvolutionKernel', None)\n        kernel_rank = get_preference_rank(manufacturer, convolution_kernel)\n\n        if kernel_rank &lt; best_kernel_rank or (kernel_rank == best_kernel_rank and ct_1.SeriesNumber &gt; highest_series_number):\n            best_kernel_rank = kernel_rank\n            highest_series_number = ct_1.SeriesNumber\n            best_file = file_path\n            if slice_or_folder == 'slice':\n                wrong_slice = ct_1.InstanceNumber != slice_num_in_path\n\n\n    if best_file:\n        if slice_or_folder == 'slice':\n            best_file_s['path'] = best_file\n        else:\n            best_file_s['path'] = best_file[:-10]\n        best_file_s['manufacturer'] = manufacturer\n        best_file_s['kernel'] = convolution_kernel\n        best_file_s['series_number'] = ct_1.SeriesNumber\n        best_file_s['slice_thickness'] = ct_1.SliceThickness\n        if slice_or_folder == 'slice':\n            best_file_s['wrong_slice_annotation'] = wrong_slice\n\n    else:\n        best_file_s['not_found'] = 1\n\n\n    return best_file_s\n</code></pre>"}]}